var { app } = require("../app");
var debug = require("debug")("tcm:server");
var http = require("http");
var { sequelize } = require("../models/index");
require("dotenv").config();

// Get port from environment and store in Express
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Create HTTP server
var server = http.createServer(app);

// Check connection
const checkConnection = async () => {
  try {
    await sequelize.authenticate();
    console.log("\x1b[36m%s\x1b[0m", "Connection to DB has been established.");
  } catch (error) {
    console.log("Unable to connect to the database: " + error);
  }
};

checkConnection();

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
console.log("\x1b[36m%s\x1b[0m", "listening on port:", port);

if (process.env.NODE_ENV == "public") {
  console.log(
    `\x1B[34musing environment\x1B[31m \x1B[4m${process.env.NODE_ENV}\x1B[24m \x1B[31mplease be careful\x1B[0m`
  );
} else {
  console.log(
    `\x1B[34musing environment\x1B[92m \x1B[4m${process.env.NODE_ENV}\x1B[24m\x1B[0m`
  );
}

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port" + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privilages");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on" + bind);
}
